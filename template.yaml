AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Alessandrina serverless application.
Globals:
  Function:
    Timeout: 10
    Runtime: go1.x
    Architectures: [x86_64]
    Environment:
      Variables:
        TABLE_NAME: !Ref BooksTable
        AWS_ENDPOINT_DEBUG: ""
        AWS_CLIENT_DEBUG: false
    AutoPublishAlias: live
    DeploymentPreference:
      Type: Linear10PercentEvery1Minute

Resources:
  BooksAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: True
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"

  # API Gateway access logs group with retention period
  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 15
      LogGroupName: !Sub "/${AWS::StackName}/APIAccessLogs"

  BooksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  GetBooksFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: get-books
      Description: Retrieve all books
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:Scan
              Resource: !GetAtt BooksTable.Arn
      Tags:
        Stack: !Sub "${AWS::StackName}-Function"

  GetBooksFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetBooksFunction}"
      RetentionInDays: 15

  GetBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 256
      CodeUri: .
      Handler: get-book
      Description: Retrieve a book
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books/{id}
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt BooksTable.Arn
      Tags:
        Stack: !Sub "${AWS::StackName}-Function"

  GetBookFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetBookFunction}"
      RetentionInDays: 15

  CreateBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: create-book
      Description: Create a new book
      Environment:
        Variables:
          STORAGE_MEMORY: false
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt BooksTable.Arn
      Tags:
        Stack: !Sub "${AWS::StackName}-Function"

  CreateBookFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateBookFunction}"
      RetentionInDays: 15

  DeleteBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: delete-book
      Description: Delete a book
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books/{id}
            Method: DELETE
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !GetAtt BooksTable.Arn
      Tags:
        Stack: !Sub "${AWS::StackName}-Function"

  DeleteBookFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DeleteBookFunction}"
      RetentionInDays: 15

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for the Books API"
    Value: !Sub "https://${BooksAPI}.execute-api.${AWS::Region}.amazonaws.com/"

  AccessLogs:
    Description: "CloudWatch Logs group for API Gateway access logs"
    Value: !Ref AccessLogs

  GetBooksFunction:
    Description: "GetBooks Lambda Function ARN"
    Value: !GetAtt GetBooksFunction.Arn

  GetBookFunction:
    Description: "GetBook Lambda Function ARN"
    Value: !GetAtt GetBookFunction.Arn

  CreateBookFunction:
    Description: "CreateBook Lambda Function ARN"
    Value: !GetAtt CreateBookFunction.Arn

  DeleteBookFunction:
    Description: "DeleteBook Lambda Function ARN"
    Value: !GetAtt DeleteBookFunction.Arn
