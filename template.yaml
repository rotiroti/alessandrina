AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Alessandrina serverless application.
Globals:
  Function:
    Timeout: 10
    Runtime: go1.x
    Architectures: [x86_64]
    Environment:
      Variables:
        TABLE_NAME: !Ref BooksTable
        DEBUG_MODE: false
    AutoPublishAlias: live
    DeploymentPreference:
      Type: !If [IsProduction, "Canary10Percent5Minutes", "AllAtOnce"]

Conditions:
  IsProduction: !Equals [!Ref "AWS::StackName", "alessandrina-prod"]

Resources:
  BooksAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency,"integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","ip":"$context.identity.sourceIp"}'

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${AWS::StackName}/access_log"
      RetentionInDays: 7

  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  GetBooksFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: get-books
      Description: Retrieve all books
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:Scan
              Resource: !GetAtt BooksTable.Arn

  GetBooksLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetBooksFunction}"
      RetentionInDays: 7

  GetBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 256
      CodeUri: .
      Handler: get-book
      Description: Retrieve a book
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books/{id}
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt BooksTable.Arn

  GetBookLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetBookFunction}"
      RetentionInDays: 7

  CreateBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: create-book
      Description: Create a new book
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt BooksTable.Arn

  CreateBookLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateBookFunction}"
      RetentionInDays: 7

  DeleteBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: delete-book
      Description: Delete a book
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books/{id}
            Method: DELETE
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !GetAtt BooksTable.Arn

  DeleteBookLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DeleteBookFunction}"
      RetentionInDays: 7

  ApplicationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-dashboard"
      DashboardBody: !Sub >
        {
          "widgets": [
            {
              "height": 6,
              "width": 24,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    "AWS/ApiGateway",
                    "4XXError",
                    "ApiName",
                    "${AWS::StackName}",
                    { "yAxis": "right" }
                  ],
                  [".", "5XXError", ".", ".", { "yAxis": "right" }],
                  [".", "DataProcessed", ".", ".", { "yAxis": "left" }],
                  [".", "Count", ".", ".", { "label": "Count", "yAxis": "right" }],
                  [".", "IntegrationLatency", ".", ".", { "stat": "Average" }],
                  [".", "Latency", ".", ".", { "stat": "Average" }]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "period": 60,
                "stat": "Sum",
                "title": "API Gateway"
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 6,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${GetBooksFunction}"],
                  [".", "Errors", ".", "."],
                  [".", "Throttles", ".", "."],
                  [".", "Duration", ".", ".", { "stat": "Average" }],
                  [".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum" }]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "stacked": false,
                "title": "GetBooks Lambda",
                "period": 60,
                "stat": "Sum"
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 6,
              "x": 12,
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${GetBookFunction}"],
                  [".", "Errors", ".", "."],
                  [".", "Throttles", ".", "."],
                  [".", "Duration", ".", ".", { "stat": "Average" }],
                  [".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum" }]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "stacked": false,
                "title": "GetBook Lambda",
                "period": 60,
                "stat": "Sum"
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 12,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    "AWS/Lambda",
                    "Invocations",
                    "FunctionName",
                    "${CreateBookFunction}"
                  ],
                  [".", "Errors", ".", "."],
                  [".", "Throttles", ".", "."],
                  [".", "Duration", ".", ".", { "stat": "Average" }],
                  [".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum" }]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "stacked": false,
                "title": "CreateBook Lambda",
                "period": 60,
                "stat": "Sum"
              }
            },
            {
              "height": 6,
              "width": 12,
              "y": 12,
              "x": 12,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    "AWS/Lambda",
                    "Invocations",
                    "FunctionName",
                    "${DeleteBookFunction}"
                  ],
                  [".", "Errors", ".", "."],
                  [".", "Throttles", ".", "."],
                  [".", "Duration", ".", ".", { "stat": "Average" }],
                  [".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum" }]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "stacked": false,
                "title": "DeleteBook Lambda",
                "period": 60,
                "stat": "Sum"
              }
            }
          ]
        }

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for the Books API"
    Value: !Sub "https://${BooksAPI}.execute-api.${AWS::Region}.amazonaws.com/"

  DashboardURL:
    Description: "Dashboard URL"
    Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ApplicationDashboard}"

  GetBooksFunction:
    Description: "GetBooks Lambda Function ARN"
    Value: !GetAtt GetBooksFunction.Arn

  GetBookFunction:
    Description: "GetBook Lambda Function ARN"
    Value: !GetAtt GetBookFunction.Arn

  CreateBookFunction:
    Description: "CreateBook Lambda Function ARN"
    Value: !GetAtt CreateBookFunction.Arn

  DeleteBookFunction:
    Description: "DeleteBook Lambda Function ARN"
    Value: !GetAtt DeleteBookFunction.Arn
