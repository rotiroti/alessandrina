AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Alessandrina serverless application.
Globals:
  Function:
    Timeout: 10
    Runtime: go1.x
    Architectures: [x86_64]
    Environment:
      Variables:
        TABLE_NAME: !Ref BooksTable
        AWS_ENDPOINT_DEBUG: ""
        AWS_CLIENT_DEBUG: false
    AutoPublishAlias: live
    DeploymentPreference:
      Type: !If [IsProduction, "Canary10Percent5Minutes", "AllAtOnce"]

Conditions:
  IsProduction: !Equals [!Ref "AWS::StackName", "alessandrina-prod"]

Resources:
  BooksAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogGroup.Arn

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${AWS::StackName}/access_log"

  BooksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  GetBooksFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: get-books
      Description: Retrieve all books
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:Scan
              Resource: !GetAtt BooksTable.Arn

  GetBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 256
      CodeUri: .
      Handler: get-book
      Description: Retrieve a book
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books/{id}
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt BooksTable.Arn

  CreateBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: create-book
      Description: Create a new book
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt BooksTable.Arn

  DeleteBookFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      MemorySize: 128
      CodeUri: .
      Handler: delete-book
      Description: Delete a book
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BooksAPI
            Path: /books/{id}
            Method: DELETE
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !GetAtt BooksTable.Arn

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for the Books API"
    Value: !Sub "https://${BooksAPI}.execute-api.${AWS::Region}.amazonaws.com/"

  GetBooksFunction:
    Description: "GetBooks Lambda Function ARN"
    Value: !GetAtt GetBooksFunction.Arn

  GetBookFunction:
    Description: "GetBook Lambda Function ARN"
    Value: !GetAtt GetBookFunction.Arn

  CreateBookFunction:
    Description: "CreateBook Lambda Function ARN"
    Value: !GetAtt CreateBookFunction.Arn

  DeleteBookFunction:
    Description: "DeleteBook Lambda Function ARN"
    Value: !GetAtt DeleteBookFunction.Arn
