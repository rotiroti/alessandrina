// Code generated by mockery v2.30.16. DO NOT EDIT.

package domain

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

type MockStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorer) EXPECT() *MockStorer_Expecter {
	return &MockStorer_Expecter{mock: &_m.Mock}
}

// FindOne provides a mock function with given fields: ctx, bookID
func (_m *MockStorer) FindOne(ctx context.Context, bookID uuid.UUID) (Book, error) {
	ret := _m.Called(ctx, bookID)

	var r0 Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (Book, error)); ok {
		return rf(ctx, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) Book); ok {
		r0 = rf(ctx, bookID)
	} else {
		r0 = ret.Get(0).(Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockStorer_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - bookID uuid.UUID
func (_e *MockStorer_Expecter) FindOne(ctx interface{}, bookID interface{}) *MockStorer_FindOne_Call {
	return &MockStorer_FindOne_Call{Call: _e.mock.On("FindOne", ctx, bookID)}
}

func (_c *MockStorer_FindOne_Call) Run(run func(ctx context.Context, bookID uuid.UUID)) *MockStorer_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_FindOne_Call) Return(_a0 Book, _a1 error) *MockStorer_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_FindOne_Call) RunAndReturn(run func(context.Context, uuid.UUID) (Book, error)) *MockStorer_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, book
func (_m *MockStorer) Save(ctx context.Context, book Book) error {
	ret := _m.Called(ctx, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockStorer_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - book Book
func (_e *MockStorer_Expecter) Save(ctx interface{}, book interface{}) *MockStorer_Save_Call {
	return &MockStorer_Save_Call{Call: _e.mock.On("Save", ctx, book)}
}

func (_c *MockStorer_Save_Call) Run(run func(ctx context.Context, book Book)) *MockStorer_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Book))
	})
	return _c
}

func (_c *MockStorer_Save_Call) Return(_a0 error) *MockStorer_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_Save_Call) RunAndReturn(run func(context.Context, Book) error) *MockStorer_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorer creates a new instance of MockStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorer {
	mock := &MockStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
