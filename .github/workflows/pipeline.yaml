name: Pipeline

on:
  push:
    paths-ignore:
      - 'README.md'

    branches:
      - 'main'
      - 'feature**'
  delete:

env:
  SAM_TEMPLATE: template.yaml
  DEV_STACK_NAME: alessandrina-dev
  DEV_PIPELINE_EXECUTION_ROLE: ${{ secrets.DEV_PIPELINE_EXECUTION_ROLE }}
  DEV_CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.DEV_CLOUDFORMATION_EXECUTION_ROLE }}
  DEV_ARTIFACTS_BUCKET: ${{ secrets.DEV_ARTIFACTS_BUCKET }}
  DEV_REGION: us-east-1
  PROD_STACK_NAME: alessandrina-prod
  PROD_PIPELINE_EXECUTION_ROLE: ${{ secrets.PROD_PIPELINE_EXECUTION_ROLE }}
  PROD_CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.PROD_CLOUDFORMATION_EXECUTION_ROLE }}
  PROD_ARTIFACTS_BUCKET: ${{ secrets.PROD_ARTIFACTS_BUCKET }}
  PROD_REGION: us-east-1

permissions:
  id-token: write
  contents: read
jobs:
  unit-tests:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Run Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53
          skip-cache: true

      - name: Run Unit Tests
        run: make coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete feature branch stack
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          sam delete \
            --stack-name $(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
            --region ${DEV_REGION} \
            --no-prompts

  build-and-deploy-feature:
    # this stage is triggered only for feature branches (feature*),
    # which will build the stack and deploy to a stack named with branch name.
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - run: sam build --template ${SAM_TEMPLATE} --cached --parallel

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to feature stack in the dev account
        shell: bash
        run: |
          sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --capabilities CAPABILITY_IAM \
            --region ${DEV_REGION} \
            --s3-bucket ${DEV_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${DEV_CLOUDFORMATION_EXECUTION_ROLE}

  build-and-package:
    if: github.ref == 'refs/heads/main'
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE}

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to dev artifact buckets
        run: |
          sam package \
            --s3-bucket ${DEV_ARTIFACTS_BUCKET} \
            --region ${DEV_REGION} \
            --output-template-file packaged-dev.yaml

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-dev.yaml
          path: packaged-dev.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to production artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  deploy-dev:
    if: github.ref == 'refs/heads/main'
    outputs:
      API_URL: ${{ steps.deploy.outputs.API_URL }}
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-dev.yaml

      - name: Assume the dev pipeline user role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.DEV_REGION }}
          role-to-assume: ${{ env.DEV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to dev account
        run: |
          sam deploy --stack-name ${DEV_STACK_NAME} \
            --template packaged-dev.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${DEV_REGION} \
            --s3-bucket ${DEV_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${DEV_CLOUDFORMATION_EXECUTION_ROLE}

      - name: Extract API URL and save for the next "integration tests" step
        id: deploy
        run: |
          API_URL=$(sam list stack-outputs --stack-name ${DEV_STACK_NAME} --region ${DEV_REGION} --output json | jq -r '.[] | select(.OutputKey=="WebEndpoint")|.OutputValue')
          echo "API_URL=${API_URL}" >> $GITHUB_OUTPUT

  integration-tests:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-dev]
    outputs:
      API_URL: ${{ steps.integration.outputs.API_URL }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Run Integration tests
        run: make integration-tests API_URL=${{ needs.deploy-dev.outputs.API_URL }}

      - name: Extract API URL and save for the next "integration tests" step
        id: integration
        run: |
          echo "API_URL=${{ needs.deploy-dev.outputs.API_URL }}" >> $GITHUB_OUTPUT

  load-tests:
    if: github.ref == 'refs/heads/main'
    needs: [integration-tests]
    runs-on: ubuntu-latest
    container: artilleryio/artillery:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install additional dependencies
        run: npm install -g artillery-plugin-expect artillery-plugin-ensure

      - name: Make reports directory
        run: mkdir reports

      - name: Execute smoke test
        run: API_URL=${{ needs.integration-tests.outputs.API_URL }} /home/node/artillery/bin/run run --output reports/smoke.json --environment=smoke-test tests/performance/flow.yml

      - name: Execute load test
        run: API_URL=${{ needs.integration-tests.outputs.API_URL }} /home/node/artillery/bin/run run --output reports/load.json --environment=load-test tests/performance/flow.yml

      - name: Generate HTML reports
        run: |
          /home/node/artillery/bin/run report --output reports/smoke.html reports/smoke.json
          /home/node/artillery/bin/run report --output reports/load.html reports/load.json

      - name: Archive test report
        uses: actions/upload-artifact@v3
        with:
          name: artillery-test-report
          path: reports/*

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [load-tests]
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
