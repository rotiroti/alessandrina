name: Pipeline

on:
  push:
    branches:
      - 'main'
      - 'feature**'
  delete:
    branches:
      - 'feature**'

env:
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: alessandrina-dev
  TESTING_PIPELINE_EXECUTION_ROLE: ${{ secrets.TESTING_PIPELINE_EXECUTION_ROLE }}
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.TESTING_CLOUDFORMATION_EXECUTION_ROLE }}
  TESTING_ARTIFACTS_BUCKET: ${{ secrets.TESTING_ARTIFACTS_BUCKET }}
  TESTING_REGION: ${{ secrets.TESTING_REGION }}
  PROD_STACK_NAME: alessandrina-prod
  PROD_PIPELINE_EXECUTION_ROLE: ${{ secrets.PROD_PIPELINE_EXECUTION_ROLE }}
  PROD_CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.PROD_CLOUDFORMATION_EXECUTION_ROLE }}
  PROD_ARTIFACTS_BUCKET: ${{ secrets.PROD_ARTIFACTS_BUCKET }}
  PROD_REGION: us-east-1

permissions:
  id-token: write
  contents: read
jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'
 
      - name: Run Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53
 
      - name: Run Unit Tests
        run: make coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete feature branch stack
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          sam delete \
            --stack-name $(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
            --region ${TESTING_REGION} \
            --no-prompts

  build-and-deploy-feature:
    # this stage is triggered only for feature branches (feature*),
    # which will build the stack and deploy to a stack named with branch name.
    # https://github.com/actions/setup-python
    # https://github.com/aws-actions/configure-aws-credentials#notice-node12-deprecation-warning
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - run: sam build --template ${SAM_TEMPLATE}

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to feature stack in the testing account
        shell: bash
        run: |
          sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  # build-and-package:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true

  #     - name: Build resources
  #       run: sam build --template ${SAM_TEMPLATE}

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Upload artifacts to testing artifact buckets
  #       run: |
  #         sam package \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --region ${TESTING_REGION} \
  #           --output-template-file packaged-testing.yaml

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: packaged-testing.yaml
  #         path: packaged-testing.yaml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Upload artifacts to production artifact buckets
  #       run: |
  #         sam package \
  #           --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #           --region ${PROD_REGION} \
  #           --output-template-file packaged-prod.yaml

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: packaged-prod.yaml
  #         path: packaged-prod.yaml

  # deploy-testing:
  #   if: github.ref == 'refs/heads/main'
  #   outputs:
  #     api_url: ${{ steps.testing.outputs.api_url }}
  #   needs: [build-and-package]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: packaged-testing.yaml

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to testing account
  #       run: |
  #         sam deploy --stack-name ${TESTING_STACK_NAME} \
  #           --template packaged-testing.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${TESTING_REGION} \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  #     - name: Extract testing API url
  #       id: testing
  #       run: |
  #         AWS_TESTING_API_URL=$(sam list stack-outputs --stack-name ${TESTING_STACK_NAME} --region ${TESTING_REGION} --output json | jq -r '.[0].OutputValue')
  #         # echo "::set-output name=api_url::$AWS_TESTING_API_URL"
  #         echo "api_url=$AWS_TESTING_API_URL" >> $GITHUB_OUTPUT
    
  # integration-test:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [deploy-testing]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: 'stable'
  #     - name: Run Integration tests
  #       env:
  #         AWS_TESTING_API_URL: ${{ needs.deploy-testing.outputs.api_url }}
  #       run: |
  #         make integration-tests AWS_TESTING_API_URL=$AWS_TESTING_API_URL

  # deploy-prod:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [integration-test]
  #   runs-on: ubuntu-latest
  #   # Configure GitHub Action Environment to have a manual approval step before deployment to production
  #   # https://docs.github.com/en/actions/reference/environments
  #   # environment: <configured-environment>
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: packaged-prod.yaml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to production account
  #       run: |
  #         sam deploy --stack-name ${PROD_STACK_NAME} \
  #           --template packaged-prod.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${PROD_REGION} \
  #           --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
